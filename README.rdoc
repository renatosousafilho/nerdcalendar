== NerdCalendar

A ideia é fazer este projeto se tornar uma gem para auxiliar a construção de sistemas que envolvam locações ou reservas.

Um modelo que for 'reservável' não pode ser reservado duas vezes em um mesmo intervalo de tempo, para isso criei os models Reservable que representa qualquer objeto ou serviço que pode ser alugado e Reservation que serve para representar uma reserva e através do mesmo ser capaz de saber se um objeto já está reservado.

<pre>
<code>
class Reservable < ActiveRecord::Base
	scope :reserved_at_date, lambda{ |date = Date.today| joins(:bookings).where("? BETWEEN bookings.start_at AND bookings.end_at and bookings.hosted=?", date, false) }
	scope :busy_at_date, lambda{ |date = Date.today| joins(:bookings).where("? BETWEEN bookings.start_at AND bookings.end_at and bookings.hosted=?", date, true) }
	scope :free_at_date, lambda{ |date = Date.today| where("id NOT IN (SELECT room_id FROM bookings WHERE (? between start_at and end_at))", date) }

	def has_reservations_between_dates?(start_date, end_date)
		bookings.where(["(start_at BETWEEN :start_at AND :end_at OR end_at BETWEEN :start_at AND :end_at)", {:start_at=> start_date, :end_at=> end_date}]).exists?
	end 

	def has_reservations_at_dates?(start_at, end_at)
		return bookings.where("(? BETWEEN start_at AND end_at OR ? BETWEEN start_at AND end_at)", start_at,end_at).exists?
	end
end
</code>
</pre>


O que precisa ser feito???

* Obter o status se o objeto reservável está livre ou ocupado e se possível uma terceira situação, reservado, ou seja aquele que ainda não foi efetivamente usado mas está reservado.
* Otimizar as queries e os mecanismos das validações.

Quem puder ajudar a contribuir pode se sentir a vontade, meu e-mail é renatosousafilho@gmail.com e twitter @renatosousafh.